@page
@model BookStore.Pages.Admin.AdminPageModel
@{
    ViewData["Title"] = "Admin Page";
    ViewData["type"] = "nonadmin";
}
<div class="admin-nav-panel">
    <button>Добавить книгу</button>
    <button>Редактировать жанры</button>
    <button>Управление авторами</button>
</div>
<div class="content">


    <div class="book-container">
        <form method="post" asp-page-handler="CreateBook" enctype="multipart/form-data">
            <span style="color:red">
                @foreach (var ex in Model.ActionResult.Errors)
                {
                    <span>@ex</span>

                    <br />
                }
            </span>
            <div class="create-container">
                <input class="input-file data" accept=".pdf, .doc, .docx, .fb2" type="file" name="file" title="тут файл книги" /><br />
                <div class="handler">
                    <input class="input-img data" accept="image/png,image/jpeg,image/gif" type="file" name="img" title="тут картинка" />
                    <div>
                        <span class="data-info">Название</span><br />
                        <input class="input-title data" name="title" placeholder="Название" value="@Model.CreatedBook.Title" /><br />
                        
                        <div class="multiselect">
                            <div class="selectBox">
                                Добавить авторов
                            </div>
                            <div class="checkboxes hidden">
                                <input class="input-in-box data" name="author" placeholder="Писатель..." />
                                <div id="bookAuthors">
                                    @await Html.PartialAsync("_AuthorsView", ViewData)
                                </div>
                            </div>
                        </div>

                        <div class="multiselect">
                            <div class="selectBox">
                                Добавить жанры
                            </div>
                            <div class="checkboxes hidden">
                                <input class="input-in-box data" name="genre" placeholder="Жанр..." />
                                <div id="bookGenres">
                                    @await Html.PartialAsync("_GenresView", ViewData)
                                </div>
                            </div>
                        </div>
                        <span class="data-info">Цена</span><br />
                        <input class="input-price data" name="price" placeholder="Цена" value="@Model.CreatedBook.Price" /><br />
                        </div>
                </div>
                <div>
                    <span class="data-info">Возрастное ограничение</span><br />
                    <input class="input-age-limit data" name="ageLimit" placeholder="Возврастное ограничение" value="@Model.CreatedBook.AgeLimit" /><br />
                    <span class="data-info">Количество страниц</span><br />
                    <input class="input-pages-count data" name="pagesCount" placeholder="Количество страниц" value="@Model.CreatedBook.Pages" /><br />
                    <span class="data-info">Дата написания</span><br />
                    <input class="input-creating-date data" type="date" name="creatingDate" placeholder="Дата создания" value="@Model.CreatedBook.DateOfCreation.ToString("yyyy-mm-dd")" /><br />

                </div>
                <textarea class="input-descr" placeholder="Описание" name="descr">@Model.CreatedBook.Description</textarea><br /><br />
                <button class="input-submit create-btn" type="submit">Сохранить</button>
            </div>

        </form>
    </div>

    @(ViewData["type"]="")

    <div class="genres-container">
        <div class="edit-genres-container">
            <div class="genre-create-container">
                <input class="genre-name-input" />
                <button class="create-genre-btn" type="button">+</button>
            </div>
            <div id="genres">
                @Html.Partial("_GenresView")
            </div>
            <div id="msg" style="color:red"></div>
        </div>
    </div>
   
    <div class="authors-container">
        <input class="author-name-input" placeholder="Поиск..." />
        <div class="finded-authors">
            @Html.Partial("_AuthorsView")
        </div>
        <button class="new-author-clicker">Добавить автора</button>
        <div class="new-author-container">
            <input name="author-picture" accept="image/png,image/jpeg,image/gif" type="file" hidden />
            <div class="new-author-container-title">
                <span>Создание автора</span>
                <button class="close-author-create-container" type="button">╳</button>
            </div>
            <div class="new-author-title">
                <img class="author-picture" title="Картинка автора"/>
                <input name="author-name" placeholder="Имя автора..."/>
            </div>
            <textarea name="author-description" placeholder="Описание автора..."></textarea>
            <button class="add-author" type="button">Добавить</button>
        </div>
    </div>

</div>

@section Styles{
    <link rel="stylesheet" href="~/css/Admin/AdminPageStyles.css" asp-append-version="true" />
}

@section Scripts{
    <script>

        $(document).on("input", ".input-in-box", (e) => {
            var name = $(e.currentTarget).prop("name");
            var linkAppend = "";
            if(name === "author"){
                linkAppend = "FindAuthors";
            }
            else if(name === "genre"){
                linkAppend = "FindGenres";
            }
            var url = `/Admin/AdminPage?handler=${linkAppend}&req=${$(e.currentTarget).val()}&type=nonmain`
            console.log(url);
            $.ajax({
                url: url,
                type: "POST",

                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: (view) => {
                    if (name === "author") {
                        document.querySelector("#bookAuthors").innerHTML = view;
                    }
                    else if (name === "genre") {
                        document.querySelector("#bookGenres").innerHTML = view;
                    }
                },
                error: (xhr, status, error) => {
                    alert(error.response);
                }
            });
        });
        
        $(".content").children().hide();
        $(".content").children().eq(0).show();

        $(document).on("change", "input[name='author-picture']", (e) => {
            fr = $("input[name='author-picture']").prop("files")[0];
            document.querySelector(".author-picture").src = URL.createObjectURL(fr)
        });

        document.getElementsByClassName('author-picture').item(0)
            .addEventListener('click', () => document.querySelector('input[name="author-picture"]').click())

        $(document).on("click", ".new-author-clicker, .close-author-create-container", (e) => {
            $(".new-author-container").toggleClass("show");
        });

        $(document).on("click", ".admin-nav-panel button", (e) => {
            var ind = Array.prototype.slice.call($(".admin-nav-panel").children()).indexOf(e.currentTarget);
            $(".content").children().hide();
            $(".content").children().eq(ind).show();
        });

        $(document).on("click", ".add-author", (e) => {

            var formData = new FormData();
            formData.append("authorPic", $("input[name='author-picture']").prop("files")[0]);

            $.ajax({
                url: "/Admin/AdminPage?handler=CreateAuthor&authorName=" + $("[name='author-name']").val() +
                    "&description=" + $("[name='author-description']").val(),
                type: "POST",
                data: formData,

                cache: false,
                contentType: false,
                processData: false,

                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: (view) => {
                    document.querySelector(".finded-authors").innerHTML = view;
                },
                error: () => {

                }
            });
        });

        $(document).on("click", ".delete-author", (e) => {
            $.ajax({
                url: "/Admin/AdminPage?handler=DeleteAuthor&authorId=" + $(e.currentTarget).val(),
                type: "DELETE",

                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: (view) => {
                    document.querySelector(".finded-authors").innerHTML = view;
                },
                error: (xhr, status, error) => {
                    alert(error.Text);
                }
            });
        });

        $(document).on("input", ".author-name-input", (e) => {
            $.ajax({
                url: "/Admin/AdminPage?handler=FindAuthors&req=" + $(e.currentTarget).val(),
                type: "POST",

                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: (view) => {
                    document.querySelector(".finded-authors").innerHTML = view;
                },
                error: (xhr, status, error) => {
                    alert(error.Text);
                }
            });
        });

        $(document).on("click", ".create-genre-btn", () => {
            $.ajax({
                url: "/Admin/AdminPage?handler=CreateGenre&genreName=" + $("input.genre-name-input").val(),
                type: "POST",
                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },

                success: (view) => {
                    document.querySelector("#genres").innerHTML = view;
                },
                error: () => {
                    $("#msg").html("Такой жанр уже существует");
                }
            });
        });

        $(document).on("click", ".remove-genre", (e) => {
            $.ajax({
                url: "/Admin/AdminPage?handler=DeleteGenre&genreName=" + e.target.value,
                type: "DELETE",
                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },

                success: (view) => {
                    document.querySelector("#genres").innerHTML = view;
                },
                error: () => {
                    $("#msg").html("error");
                }
            });
        });

        $(document).on("input", ".genre-name-input", (e) => {
            $.ajax({
                url: "/Admin/AdminPage?handler=FindGenres&req=" + $(e.currentTarget).val(),
                type: "POST",

                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: (view) => {
                    document.querySelector("#genres").innerHTML = view;
                },
                error: (xhr, status, error) => {
                    alert(error.Text);
                }
            });
        });
    </script>

    <script src="/lib/jquery-ajax-unobtrusive/jquery.unobtrusive-ajax.min.js"></script>
}

