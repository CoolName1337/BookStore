@page
@model BookStore.Pages.Admin.AdminPageModel
@{
    ViewData["Title"] = "Admin Page";
    ViewData["type"] = "sorry";
}
<div class="admin-nav-panel">
    <button>Добавить книгу</button>
    <button>Редактировать жанры</button>
    <button>Управление авторами</button>
</div>
<div class="content">

    <div class="books-container">
        <input class="book-search-input" placeholder="Поиск..." />

        <button class="new-book-clicker">Добавить книгу</button>
        <form id="bookForm" enctype="multipart/form-data">
            <div class="new-book-container">
                <input asp-for="CreatedBook.SourceFile" class="input-file" accept=".pdf, .doc, .docx, .fb2" title="файл книги" /><br />
                <input asp-for="CreatedBook.SourceImage" class="input-book-image" accept="image/png,image/jpeg,image/gif" style="width:0;height:0" />
                <span class="text-danger" asp-validation-for="CreatedBook.SourceFile"></span>
                <div class="handler">
                    <div>
                        <img class="book-picture" title="картинка книги" />
                        <span class="text-danger" asp-validation-for="CreatedBook.SourceImage"></span>
                    </div>
                    <div class="title-container">
                        <span class="data-info">Название</span><br />
                        <input asp-for="CreatedBook.Title" autocomplete="off" class="input-title data" placeholder="Название" /><br />
                        <span class="text-danger" asp-validation-for="CreatedBook.Title"></span><br />

                        <div class="multiselect">
                            <div class="selectBox">
                                Добавить авторов
                            </div>
                            <div class="selectboxes hidden">
                                <input asp-for="CreatedBook.Authors" class="authors-input" hidden/>
                                <input class="input-in-box data" placeholder="Писатель..." />
                                @foreach (var author in Model._serviceAuthor.Authors)
                                {
                                    <button class="author-select" type="button" value="@author.Id">@author.Name</button>
                                }
                            </div>
                        </div>

                        <div class="multiselect">
                            <div class="selectBox">
                                Добавить жанры
                            </div>
                            <div class="selectboxes hidden">
                                <input asp-for="CreatedBook.Genres" class="genres-input" hidden />
                                <input class="input-in-box data" placeholder="Жанр..." />
                                @foreach (var genre in Model._serviceGenre.GetAll())
                                {
                                    <button class="genre-select" type="button" value="@genre.Id">@genre.Value</button>
                                }
                            </div>
                        </div>
                        <span class="data-info">Цена</span><br />
                        <input asp-for="CreatedBook.Price" class="input-price data" placeholder="Цена" /><br />
                        <span class="text-danger" asp-validation-for="CreatedBook.Price"></span><br />
                    </div>
                </div>
                <div>
                    <span class="data-info">Возрастное ограничение</span><br />
                    <input asp-for="CreatedBook.AgeLimit" class="input-age-limit data" placeholder="Возврастное ограничение" /><br />
                    <span class="text-danger" asp-validation-for="CreatedBook.AgeLimit"></span><br />
                    <span class="data-info">Количество страниц</span><br />
                    <input asp-for="CreatedBook.Pages" class="input-pages-count data" placeholder="Количество страниц" /><br />
                    <span class="text-danger" asp-validation-for="CreatedBook.Pages"></span><br />
                    <span class="data-info">Дата написания</span><br />
                    <input asp-for="CreatedBook.DateOfCreation" type="date" class="input-creating-date data" placeholder="Дата создания" /><br />
                    <span class="text-danger" asp-validation-for="CreatedBook.DateOfCreation"></span><br />
                </div>
                <label class="data-info">Описание</label>
                <textarea asp-for="CreatedBook.Description" class="input-descr" placeholder="Описание"></textarea><br />
                <span class="text-danger" asp-validation-for="CreatedBook.Description"></span>
                <button class="create-book-btn" type="button">Сохранить</button>
            </div>
        </form>
        <div class="finded-books">
            @await Html.PartialAsync("_BooksView")
        </div>
    </div>

    @(ViewData["type"] = "")
    <div class="genres-container">
        <div class="edit-genres-container">
            <div class="genre-create-container">
                <input class="genre-name-input" />
                <button class="create-genre-btn" type="button">+</button>
            </div>
            <div id="genres">
                @await Html.PartialAsync("_GenresView")
            </div>
            <div id="msg" style="color:red"></div>
        </div>
    </div>

    <div class="authors-container">
        <input class="author-name-input" placeholder="Поиск..." />

        <button class="new-author-clicker">Добавить автора</button>
        <div class="new-author-container">
            <input name="author-picture" accept="image/png,image/jpeg,image/gif" type="file" hidden />
            <div class="new-author-container-title">
                <span>Создание автора</span>
                <button class="close-author-create-container" type="button">╳</button>
            </div>
            <div class="new-author-title">
                <img class="author-picture" title="Картинка автора" />
                <input name="author-name" placeholder="Имя автора..." />
            </div>
            <textarea name="author-description" placeholder="Описание автора..."></textarea>
            <button class="add-author" type="button">Добавить</button>
        </div>

        <div class="finded-authors">
            @await Html.PartialAsync("_AuthorsView")
        </div>

    </div>

</div>

@section Styles{
    <link rel="stylesheet" href="~/css/Admin/AdminPageStyles.css" asp-append-version="true" />
}

    @section Scripts{

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js" integrity="sha512-rstIgDs0xPgmG6RX1Aba4KV5cWJbAMcvRCVmglpam9SoHZiUCyQVDdH2LPlxoHtrv17XWblE/V/PP+Tr04hbtA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/4.0.0/jquery.validate.unobtrusive.min.js" integrity="sha512-xq+Vm8jC94ynOikewaQXMEkJIOBp7iArs3IhFWSWdRT3Pq8wFz46p+ZDFAR7kHnSFf+zUv52B3prRYnbDRdgog==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
        $(document).ready(() => {
            $.validator.unobtrusive.parse($("#bookForm"));

            $(".content").children().hide();
            $(".content").children().eq(0).show();

            document.getElementsByClassName('book-picture').item(0)
                .addEventListener('click', () => document.querySelector('input.input-book-image').click());

            document.getElementsByClassName('author-picture').item(0)
                .addEventListener('click', () => document.querySelector('input[name="author-picture"]').click());

        })

        $(document).on("click", ".genre-select", (e) => {
            e.currentTarget.classList.toggle("selected-item");
            if(e.currentTarget.classList.contains("selected-item")){
                document.querySelector(".genres-input").value += `${$(e.currentTarget).val()};`;
            }
            else {
                $(".genres-input").val($(".genres-input").val().replace(`${$(e.currentTarget).val()};`, ''));
            }
        });
        $(document).on("click", ".author-select", (e) => {
            e.currentTarget.classList.toggle("selected-item");
            if (e.currentTarget.classList.contains("selected-item")) {
                document.querySelector(".authors-input").value += `${$(e.currentTarget).val()};`;
            }
            else {
                $(".authors-input").val($(".authors-input").val().replace(`${$(e.currentTarget).val()};`, ''));
            }
        });

        $(document).on("change", "input.input-book-image", (e) => {
            fr = $("input.input-book-image").prop("files")[0];
            if (fr != null){
                document.querySelector(".book-picture").src = URL.createObjectURL(fr);
            }
            else{
                document.querySelector(".book-picture").src = "";
            }
        });

        $(document).on("change", "input[name='author-picture']", (e) => {
            fr = $("input[name='author-picture']").prop("files")[0];
            document.querySelector(".author-picture").src = URL.createObjectURL(fr)
        });

        $(document).on("input", ".input-in-box", (e) => {
            $(e.currentTarget).parent().children("button").each((ind, el) => {
                if ($(el).text().toUpperCase().includes($(e.currentTarget).val().toUpperCase())) {
                    $(el).show()
                }
                else{
                    $(el).hide()
                }
            });
        });


        $(document).on("click", ".new-book-clicker, .close-book-create-container", (e) => {
            $(".new-book-container").toggleClass("show");
        });
        $(document).on("click", ".new-author-clicker, .close-author-create-container", (e) => {
            $(".new-author-container").toggleClass("show");
        });

        $(document).on("click", ".admin-nav-panel button", (e) => {
            var ind = Array.prototype.slice.call($(".admin-nav-panel").children()).indexOf(e.currentTarget);
            $(".content").children().hide();
            $(".content").children().eq(ind).show();
        });



        $(document).on("click", ".create-book-btn", (e) => {
            if ($("#bookForm").valid()) {
                $.ajax({
                    url: "AdminPage?handler=CreateBook",
                    type: "POST",
                    data: new FormData(document.getElementById("bookForm")),

                    processData: false,
                    contentType: false,

                    beforeSend: (xhr) => {
                        xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                    },
                    success: (response) => {
                        document.querySelector(".finded-books").innerHTML = view;
                    },
                    error: (request, status, error) => {
                        alert(request.responseText);
                    }

                });
            }
        });

        $(document).on("input", ".book-search-input", (e) => {
            $.ajax({
                url: "/Admin/AdminPage?handler=FindBooks&req=" + $(e.currentTarget).val(),
                type: "POST",

                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: (view) => {
                    document.querySelector(".finded-books").innerHTML = view;
                },
                error: (xhr, status, error) => {
                    alert(error.Text);
                }
            });
        });

        $(document).on("click", ".delete-book", (e) => {
            $.ajax({
                url: "/Admin/AdminPage?handler=DeleteBook&bookId=" + e.target.value,
                type: "DELETE",
                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: (view) => {
                    document.querySelector(".finded-books").innerHTML = view;
                },
                error: () => {
                    $("#msg").html("error");
                }
            });
        });






        $(document).on("click", ".add-author", (e) => {

            var formData = new FormData();
            formData.append("authorPic", $("input[name='author-picture']").prop("files")[0]);

            $.ajax({
                url: "/Admin/AdminPage?handler=CreateAuthor&authorName=" + $("[name='author-name']").val() +
                    "&description=" + $("[name='author-description']").val(),
                type: "POST",
                data: formData,

                cache: false,
                contentType: false,
                processData: false,

                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: (view) => {
                    document.querySelector(".finded-authors").innerHTML = view;
                },
                error: () => {

                }
            });
        });

        $(document).on("click", ".delete-author", (e) => {
            $.ajax({
                url: "/Admin/AdminPage?handler=DeleteAuthor&authorId=" + $(e.currentTarget).val(),
                type: "DELETE",

                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: (view) => {
                    document.querySelector(".finded-authors").innerHTML = view;
                },
                error: (xhr, status, error) => {
                    alert(error.Text);
                }
            });
        });

        $(document).on("input", ".author-name-input", (e) => {
            $.ajax({
                url: "/Admin/AdminPage?handler=FindAuthors&req=" + $(e.currentTarget).val(),
                type: "POST",

                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: (view) => {
                    document.querySelector(".finded-authors").innerHTML = view;
                },
                error: (xhr, status, error) => {
                    alert(error.Text);
                }
            });
        });

        $(document).on("click", ".create-genre-btn", () => {
            $.ajax({
                url: "/Admin/AdminPage?handler=CreateGenre&genreName=" + $("input.genre-name-input").val(),
                type: "POST",
                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },

                success: (view) => {
                    document.querySelector("#genres").innerHTML = view;
                },
                error: () => {
                    $("#msg").html("Такой жанр уже существует");
                }
            });
        });

        $(document).on("click", ".remove-genre", (e) => {
            $.ajax({
                url: "/Admin/AdminPage?handler=DeleteGenre&genreName=" + e.target.value,
                type: "DELETE",
                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },

                success: (view) => {
                    document.querySelector("#genres").innerHTML = view;
                },
                error: () => {
                    $("#msg").html("error");
                }
            });
        });

        $(document).on("input", ".genre-name-input", (e) => {
            $.ajax({
                url: "/Admin/AdminPage?handler=FindGenres&req=" + $(e.currentTarget).val(),
                type: "POST",

                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: (view) => {
                    document.querySelector("#genres").innerHTML = view;
                },
                error: (xhr, status, error) => {
                    alert(error.Text);
                }
            });
        });
    </script>

    <script src="/lib/jquery-ajax-unobtrusive/jquery.unobtrusive-ajax.min.js"></script>
}

