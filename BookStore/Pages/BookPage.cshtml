@page
@model BookStore.Pages.BookPageModel
@{
    ViewData["Title"] = Model.TakedBook?.Title ?? "deleted";
    int userRating = 0;
    if (User.Identity.IsAuthenticated)
    {
        userRating = Model._serviceRating.GetUserRating(Model.CurrentUser, Model.TakedBook);
    }
}

<div class="content">
    @if (User.IsInRole("admin") || User.IsInRole("creator"))
    {
        <a class="edit-btn" href="/Admin/EditBook?Id=@Model.TakedBook.Id">Редактировать</a>
    }
    <div class="title-container">
        <img class="book-preview" src="@Model.TakedBook.SourceImage" alt="Картинка не найдена" />
        <div>
            <h2>@Model.TakedBook.Title</h2>
            <p class="writer">Автор: @Model.TakedBook.Writer</p>

            <h3 class="genres-title">Жанры:</h3>
            <div class="genres">
                <form method="post" asp-page="/SearchResult">
                    @foreach (var genre in Model.TakedBook.Genres)
                    {
                        <button class="genre-ref" type="submit" name="IncludingGenres" value="@genre.Id">@genre.Value</button>
                    }
                </form>

            </div>

            <div class="rating-and-review-container" style="display:flex">
                <div class="dropdown-rating">
                    <div class="rating-button">
                        <div class="filler" style="height:@($"{Model._serviceRating.GetRating(Model.TakedBook)*20}%")"></div>
                        <svg class="rate-star" width="40" height="40">
                            <polygon points="20,0 6,40 40,16 0,16 34,40" style="fill:orange;fill-rule:nonzero;" />
                        </svg>
                    </div>
                    <div class="rating-droppanel">
                        <div class="rating-number">@Model._serviceRating.GetRating(Model.TakedBook)</div>
                        <div class="rating-count">Оценили: @Model._serviceRating.GetRatingCount(Model.TakedBook)</div>
                        <div class="rate-container">
                            <span>Оцените книгу:</span>
                            <div class="stars-container">
                                <form style="display:flex">
                                    <input name="id" value=@Model.TakedBook.Id hidden />
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <button class="rate-btn" type="button" name="star" value=@i>
                                            <svg width="40" height="40">
                                                <polygon class="star-@i star @(userRating >= i ? "taked-star" : "not-taked-star")"
                                                     points="20,0 26,16 40,16 28,25 34,40 20,30 6,40 12,25 0,16 14,16 " />
                                            </svg>
                                        </button>
                                    }
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="add-review-container">
                    <button class="toggle-review-text-container" type="button">Оставить рецензию</button>
                    <div class="review-text-container hidden">
                        <span>Ваша рецензия</span>
                        <textarea style="white-space:pre-wrap" class="review-text"></textarea>
                        <button type="button" class="add-review-btn review-btn">Добавить</button>
                        <button type="button" class="cancel-review-btn review-btn">Отмена</button>
                    </div>
                </div>

            </div>
            <div style="display:flex;">
                @if (User.Identity.IsAuthenticated && Model.CurrentUser.AvailableBooks.Any(book => book.Id == Model.TakedBook.Id))
                {
                    <button class="dwn-btn">Скачать</button>
                }
                else
                {
                    <button class="buy-btn">КУПИТЬ ЗА @Model.TakedBook.Price</button>
                }
                @if (User.Identity.IsAuthenticated)
                {
                    var fav = Model.CurrentUser.Favorites.FirstOrDefault(fav => fav.BookId == Model.TakedBook.Id);

                    <button class=@(fav == null ? "unfav-btn" : "fav-btn") type="button" name="fav-btn" value="fav">♡</button>
                }
            </div>
        </div>
    </div>

    <div class="description-container vertical-container">
        <hr />
        <span class="description-title vertical-container-title">Описание книги</span>
        <div style="white-space: pre-line" class="description">
            @Model.TakedBook.Description
        </div>
    </div>


    <div class="detailed-info-container vertical-container">
        <hr />
        <span class="detailed-info-title vertical-container-title">Подробная информация</span>
        <div class="detailed-info">
            <div class="info-div age-limit">
                <span>Возрастное ограничение:</span>
                <span>@Model.TakedBook.AgeLimit</span>
            </div>
            <div class="info-div page-count">
                <span>Количество страниц:</span>
                <span>@Model.TakedBook.Pages</span>
            </div>
            <div class="info-div adding-date">
                <span>Дата добавления:</span>
                <span>@Model.TakedBook.AddingDate.ToShortDateString()</span>
            </div>
            <div class="info-div creating-date">
                <span>Дата написания:</span>
                <span>@Model.TakedBook.DateOfCreation.ToShortDateString()</span>
            </div>
        </div>
    </div>

    @if (Model.TakedBook.Reviews.Any())
    {
        <div class="reviews-container vertical-container">
            <hr />
            <span class="reviews-title vertical-container-title">Рецензии</span>

            <div class="drop-sort-container">
                <button class="drop-clicker">Сначала новые</button>
                <div class="drop-sort-content">
                    <a class="date-review-sort" data-ajax="true"
                        data-ajax-url="/BookPage?handler=ReviewSort&bookId=@Model.TakedBook.Id&req=date"
                        data-ajax-update="#reviewsPanel">
                        Сначала новые
                    </a>
                    <a class="popularity-review-sort" data-ajax="true"
                        data-ajax-url="/BookPage?handler=ReviewSort&bookId=@Model.TakedBook.Id&req=popularity"
                        data-ajax-update="#reviewsPanel">
                        Сначала популярные
                    </a>
                </div>
            </div> 

            <div id="reviewsPanel">

                @foreach (var review in Model.TakedBook.Reviews.OrderByDescending(review => review.Created).ToList())
                {
                    var user = Model._serviceUser.GetUser(review.UserId);
                    <div class="review-container">
                        <div class="review-header">
                            <input name="userId" value="@user.Id" hidden />
                            <input name="reviewId" value="@review.Id" hidden />
                            <a class="review-owner-container" asp-page="/Account/ProfilePage" asp-route-userName="@user.UserName">
                                <img class="review-owner-pic" src="@user.ProfilePicture" />
                            </a>
                            <a class="review-owner-container" asp-page="/Account/ProfilePage" asp-route-userName="@user.UserName">
                                <span class="review-owner">@user.UserName</span>
                            </a>
                            <span class="rating-for-book">
                                @for (int i = 0; i < @Model._serviceRating.GetUserRating(user, Model.TakedBook); i++)
                                {
                                    <svg class="rate-star" width="20" height="20">
                                        <polygon points="10,0 17,20 0,8 20,8 3,20" style="fill:orange;fill-rule:nonzero;" />
                                    </svg>
                                }
                            </span>

                            @if (user == Model.CurrentUser || User.IsInRole("admin") || User.IsInRole("creator"))
                            {
                                <button class="delete-review">Удалить рецензию</button>
                            }
                        </div>
                        <span class="created-date">@review.Created</span><br>
                        <span style="white-space:pre-wrap" class="review-text">@review.Text.Replace("<br/>", "\n")</span>
                        @if (User.Identity.IsAuthenticated)
                        {
                            var userRate = review.Rates.Find(rate => rate.UserId == Model.CurrentUser.Id);
                            bool selectLike = userRate?.Like ?? false;
                            bool selectDislike = !userRate?.Like ?? false;
                            <div class="rate-review-container">
                                <div class="like-container @(selectLike ? "selected" : "")">
                                    <div class="like-count">@review.Rates.Count(rate=>rate.Like)</div>
                                    <button class="review-like-btn" value="true">👍</button>
                                </div>
                                <div class="dislike-container @(selectDislike ? "selected" :"" )">
                                    <div class="dislike-count">@review.Rates.Count(rate=>!rate.Like)</div>
                                    <button class="review-dislike-btn" value="false">👎</button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
            
        </div>
    }
</div>

@section Styles{
    <link rel="stylesheet" href="~/css/BooksPage/BookPageStyles.css" />
}

@section Scripts{
    @if (User.Identity.IsAuthenticated)
    {
        <script>
            $(document).on("click", ".buy-btn", (e) => {

                $.ajax({
                    url: "/BookPage?handler=BuyBook&bookId=@Model.TakedBook.Id",
                    type: "POST",
                    beforeSend: (xhr) => {
                        xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                    },

                    success: (res) => {
                        document.querySelector(".buy-btn").outerHTML = "<button class='dwn-btn'>Скачать</button>";
                    },

                    error: (xhr, status, error) => {
                        console.log(xhr.responseText);
                        alert(xhr.responseText);
                    }
                });
            });


            $(document).on("click", ".dwn-btn", (e) => {
                $.get("/BookPage?handler=DwnBook&bookId=@Model.TakedBook.Id", (url) => {
                    window.location = url;
                });
            });
        </script>
    }
    <script>



        $(document).on("click", ".drop-sort-content a", (e) => {
            $(e.target).parent().parent().children(".drop-clicker").text(e.currentTarget.text);
        });
        
        $(document).on("click", ".drop-clicker", (e) => {
            $(e.target).parent().children(".drop-sort-content").toggleClass("show");
        });

        // Handler for rate review
        $(document).on("click", ".like-container, .dislike-container", (e) => {
            $.ajax({
                url: `/BookPage?handler=ReviewRate` +
                    `&reviewId=${$(e.currentTarget).parent().parent().find('input[name="reviewId"]').val()}` +
                    `&userId=${$(e.currentTarget).parent().parent().find('input[name="userId"]').val()}` +
                    `&like=${$(e.currentTarget).children("button").val()}`,
                type: "POST",
                contentType: "application/json",
                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: (res) => {
                    $(e.currentTarget).parent().find(".like-count").text(res.likes);
                    $(e.currentTarget).parent().find(".dislike-count").text(res.dislikes);
                    $(e.currentTarget).parent().children().each((ind, el) => {
                        if (e.currentTarget == el) {
                            el.classList.toggle("selected");
                        }
                        else {
                            el.classList.remove("selected");
                        }
                    })
                }
            });

        });

        // Handler for delete review
        $(document).on("click", ".delete-review", (e) => {
            $.ajax({
                url: `/BookPage?handler=Review` +
                    `&reviewId=${$(e.currentTarget).parent().find('input[name="reviewId"]').val()}` +
                    `&userId=${$(e.currentTarget).parent().find('input[name="userId"]').val()}`,
                type: "DELETE",
                contentType: "application/json",
                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: (res) => {
                    $(e.currentTarget).parent().parent().remove();
                    if (!$(".reviews-container").has($(".review-container")).length) {
                        $(".reviews-container").remove();
                    }
                }
            });
        })

        // Handler for toggle review input
        $(document).on("click", ".toggle-review-text-container, .cancel-review-btn", (e) => {
            $(".review-text-container").toggleClass("hidden");
        });

        // Handler for set review
        $(".add-review-btn").click((e) => {

            $.ajax({
                url: `/BookPage?handler=Review&bookId=${$('input[name = "id"]').val()}&text=${$(".review-text").val().replaceAll("\n", "<br/>")}`,
                type: "POST",
                contentType: "application/json",
                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },

                success: (res) => {
                    $(".review-text-container").toggleClass("hidden");

                }
            });
        });

        // Handler for rating animation
        let currentStars = @userRating;
        $("button[name='star']").hover(
            (e) => {
                $(document.getElementsByClassName("star")).each((ind, el) => {
                    el.classList.add(ind < e.currentTarget.value ? "taked-star" : "not-taked-star");
                    el.classList.remove(ind < e.currentTarget.value ? "not-taked-star" : "taked-star");

                });
            },
            (e) => {
                $(document.getElementsByClassName("star")).each((ind, el) => {
                    el.classList.add(ind < currentStars ? "taked-star" : "not-taked-star");
                    el.classList.remove(ind < currentStars ? "not-taked-star" : "taked-star");
                });
            }
        );

        // Handler for set rating
        $("button[name='star']").click((e) => {

            $.ajax({
                url: "/BookPage?handler=RateBook&bookId=" + $("input[name='id']").val() + "&stars=" + e.currentTarget.value,
                type: "POST",
                contentType: "application/json",
                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },

                success: (res) => {
                    $('.rating-number').text(res.rating);
                    $('.rating-count').text("Оценили: " + res.count);

                    currentStars = res.userRating;
                    $('.filler').css("height", `${res.rating * 20}%`);

                    $(document.getElementsByClassName("star")).each((ind, el) => {

                        if (ind < res.userRating) {
                            el.classList.add("taked-star");
                            el.classList.remove("not-taked-star");
                        }
                        else {
                            el.classList.add("not-taked-star");
                            el.classList.remove("taked-star");
                        }
                    });
                }
            });
        })

        // Handler for set favorite
        $("button[name='fav-btn']").click((e) => {

            $.ajax({
                url: "/BookPage?handler=Favorite&bookId=" + $("input[name='id']").val(),
                type: "POST",
                contentType: "application/json",
                beforeSend: (xhr) => {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },

                success: (res) => {
                    if (res) {
                        e.target.classList.remove("unfav-btn")
                        e.target.classList.add("fav-btn")
                    }
                    else {
                        e.target.classList.remove("fav-btn")
                        e.target.classList.add("unfav-btn")
                    }
                }
            });
        });

    </script>

    <script src="/lib/jquery-ajax-unobtrusive/jquery.unobtrusive-ajax.min.js"></script>
}